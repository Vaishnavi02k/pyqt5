# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'todoList.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import sqlite3

#Create a database or connect one
conn = sqlite3.connect('mylist.db')
# create a cursor
c = conn.cursor()

#Create a table
c.execute("CREATE TABLE if not exists todo_list(list_item text)")
#commit the changes
conn.commit()
#close our connection
conn.close()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(615, 583)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.addItem_lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.addItem_lineEdit.setGeometry(QtCore.QRect(20, 20, 571, 51))
        self.addItem_lineEdit.setObjectName("addItem_lineEdit")
        self.addButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.add_it())
        self.addButton.setGeometry(QtCore.QRect(20, 90, 121, 41))
        self.addButton.setObjectName("addButton")
        self.deleteButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.delete_it())
        self.deleteButton.setGeometry(QtCore.QRect(160, 90, 121, 41))
        self.deleteButton.setObjectName("deleteButton")
        self.clearButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.clear_it())
        self.clearButton.setGeometry(QtCore.QRect(300, 90, 121, 41))
        self.clearButton.setObjectName("clearButton")
        self.myList_listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.myList_listWidget.setGeometry(QtCore.QRect(20, 150, 571, 361))
        self.myList_listWidget.setObjectName("myList_listWidget")
        self.savetoDatabase = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.save_it())
        self.savetoDatabase.setGeometry(QtCore.QRect(440, 90, 151, 41))
        self.savetoDatabase.setObjectName("savetoDatabase")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 615, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Grab all the items from the database every time we run program
        self.grab_all()

    #Grab all items from database
    def grab_all(self):
        #Create a database or connect one
        conn = sqlite3.connect('mylist.db')
        # create a cursor
        c = conn.cursor()

        #SELECT Everything
        c.execute ("SELECT * FROM  todo_list")
        records = c.fetchall()

        #commit the changes
        conn.commit()
        #close our connection
        conn.close()

        #Loop through records and add to screen
        for record in records:
            self.myList_listWidget.addItem(str(record[0]))


    #add item to list
    def add_it(self):
        #grab item from listbox
        item=self.addItem_lineEdit.text()

        #add item to list
        self.myList_listWidget.addItem(item)

        #clear the item box
        self.addItem_lineEdit.setText("")

    #Delete item from list
    def delete_it(self):
        #Grab the select row or current row
        clicked = self.myList_listWidget.currentRow()
        #pop up box
        msg = QMessageBox()
        msg.setWindowTitle("Warning!")
        msg.setText("Are you sure ?")
        msg.setIcon(QMessageBox.Warning)
        y=msg.exec_()
        #delete selected row
        self.myList_listWidget.takeItem(clicked)


    #Clear all items from list
    def clear_it(self):
        #pop up box
        msg = QMessageBox()
        msg.setWindowTitle("Warning!")
        msg.setText("Are you sure ?")
        msg.setIcon(QMessageBox.Warning)
        y=msg.exec_()

        self.myList_listWidget.clear()

    #Save to the Database
    def save_it(self):
        #Create a database or connect one
        conn = sqlite3.connect('mylist.db')
        # create a cursor
        c = conn.cursor()
        #delete everything in the database table
        c.execute('DELETE FROM todo_list;',)

        #create a blank list to hold to do list items
        items=[]
        #loop through the list widget and pull out each iem and append that to items
        for i in range(self.myList_listWidget.count()):
            items.append(self.myList_listWidget.item(i))
        
        for item in items:
            #print(item.text())
            
            #add items to the table
            c.execute("INSERT INTO todo_list VALUES(:item)",{
                'item':item.text(),
            }
            )

        #Create a table
        c.execute ("SELECT * FROM  todo_list")
        records = c.fetchall()

        #commit the changes
        conn.commit()
        #close our connection
        conn.close()

        #pop up box
        msg = QMessageBox()
        msg.setWindowTitle("Saved to Database!")
        msg.setText("Your To do List is Saved.")
        msg.setIcon(QMessageBox.Information)
        x=msg.exec_()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "To do List"))
        self.addButton.setText(_translate("MainWindow", "Add Item"))
        self.deleteButton.setText(_translate("MainWindow", "Delete Item"))
        self.clearButton.setText(_translate("MainWindow", "Clear List"))
        self.savetoDatabase.setText(_translate("MainWindow", "Save to Database"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
